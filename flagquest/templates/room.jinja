{% extends 'base.jinja' %}
{% from 'macros/_room.jinja' import question_widget, progress_bar, edit_room_input with context %}

{# Variables pour plus tard #}
{% set user_is_in_room = current_user in room.users %}
{# {% set nbr_question_solved = sum(q.is_solved_by(current_user) for q in room.questions) %} #}
{% set nbr_question_total = room.questions | length %}

{% block title %}
{{ super() }} - {{room.name}}
{% endblock %}

{% block head %}
{{super()}}
<link rel="stylesheet" href="/static/style/room.css">
<script src="{{url_for('static', filename='script/room.js')}}"></script>

<script>
    // fonction button Rejoindre la room
    function joinRoom() {
        fetch('{{ url_for('api.Room_room_join_resource', room_url_name = room.url_name) }}', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then(response => response.json())
            // .then(response => alert(JSON.stringify(response)))
            // refresh la page une fois que la room est rejoint
            .then(response => location.reload(true))
    }

    function answerQuestion(question_id) {
        // On récupère la réponse actuelle
        let answer_field = document.getElementById(`question_answer-${question_id}`)
        answer = answer_field.value
        let answer_form = document.getElementById(`question_form-${question_id}`)

        const response = fetch('{{ url_for('api.Room_answer_question_resource') }}?' + new URLSearchParams({
            question_id: question_id,
            answer: answer,
        }),
            {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            }).then(function (response) {
                if (!response.ok) {
                    showErrorToast("Erreur lors de la réponse à la question: " + response.message);
                    throw new Error("Couldn't answer question.")
                }
                return response.json()
            })
            //.then(response => alert(JSON.stringify(response)))
            .then(response => {
                if (response.correct) {
                    //answer_form.submit()
                    document.location.reload(false)
                }
                // si l'user répond & que sa réponse est fausse
                // pop-up erreur
                // effacer la réponse entrée
                else {
                    showErrorToast("Réponse incorrect !")
                    answer_form.reset()
                }
            })
    }

    function createQuestion() {
        fetch('{{ url_for('api.Room_create_question_resource', url_name = room.url_name) }}', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            // refresh la page une fois que la question est créé
            .then(response => location.reload(true))
    }

    function existingVictimVMInfos() {
        vmInfoDiv = document.getElementById("victim-vm-info")
        for (const i in response) {
            var para = document.createElement("p");
            var node = document.createTextNode(response[i].ip_address);
            para.appendChild(node);
            vmInfoDiv.appendChild(para)
        }
    }

    function displayVictimVMInfos(data) {
        console.log(data)
        vmInfoDiv = document.getElementById("victim-vm-info-data")
        vmInfoDiv.innerHTML = ""
        $('.delete-vms-button-container').css('display', '');

        for (const i in data) {
            var para = document.createElement("p");
            var node = document.createTextNode(data[i].ip_address);
            para.appendChild(node);
            vmInfoDiv.appendChild(para)
        }
    }

    function requestVictimVMs() {
        document.getElementById("victim-vm-info-data").style.display = ''
        document.getElementById("request-victim-vms-button").style.display = 'none'
        fetch("{{ url_for('api.VM_request_victim_vms_resource', room_url_name = room.url_name) }}", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then((response) => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Status not ok');
            })
            // .then(response => alert(JSON.stringify(response)))
            .then(data => displayVictimVMInfos(data))
            .then(document.getElementById("request-victim-vms-button").style.display = 'none')
            .then(document.getElementById("victim-vm-info-container").style.display = 'block')
            .catch(error => {
                console.error("Error creating the victim VMs: ", error)
                showErrorToast("Error lors de la création des VMs victimes!")
                document.getElementById("victim-vm-info-data").style.display = 'none'
                document.getElementById("request-victim-vms-button").style.display = ''
            });
    }

    function displayAttackVMInfos(data) {
        console.log(data)
        vmInfoDiv = document.getElementById("attack-vm-info-data");
        vmInfoDiv.innerHTML = ""
        $('.delete-vms-button-container').css('display', '');

        let label_data = { "IP Address": data.ip_address, "VNC Port": data.vnc_port, "Login": data.username, "Mot de passe": data.password };
        for (let [key, value] of Object.entries(label_data)) {
            var para = document.createElement("p");
            var node = document.createTextNode(key + ": " + value);
            para.appendChild(node);
            vmInfoDiv.appendChild(para)
        }
        // Direct connection button
        var link = document.createElement("a");
        link.setAttribute("href", `com.realvnc.vncviewer.connect://${data.ip_address}:${data.vnc_port}`);
        link.setAttribute("class", "btn btn-primary")
        link.textContent = "Ouvrir avec RealVNC Viewer";
        vmInfoDiv.appendChild(link)
    }

    function requestAttackVMs() {
        document.getElementById("attack-vm-info-data").style.display = ''
        document.getElementById("request-attack-vm-button").style.display = 'none'
        fetch('{{ url_for("api.VM_request_attack_vm_resource") }}', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then((response) => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Status not ok');
            })
            //.then(response => alert(JSON.stringify(response)))
            .then(response => displayAttackVMInfos(response))
            .then(document.getElementById("request-attack-vm-button").style.display = 'none')
            .catch(error => {
                console.error("Error creating the attack VM: ", error)
                showErrorToast("Error lors de la création de la VM d'attaque!")
                document.getElementById("attack-vm-info-data").style.display = 'none'
                document.getElementById("request-attack-vm-button").style.display = ''
            });
    }

    function setupVMInfos() {
        // On met en place les VMs victimes
        fetch("{{url_for('api.VM_get_existing_victim_vm_resource', room_url_name=room.url_name)}}")
            .then(response => response.json())
            .then(data => {
                if (data.length == 0) {
                    // We don't have any VMs, show the "request VM" button
                    document.getElementById("victim-vm-info-data").style.display = 'none'
                    document.getElementById("request-victim-vms-button").style.display = ''
                } else {
                    // Show the info of the existing VMs
                    console.debug("Found existing victim VMs")
                    displayVictimVMInfos(data)
                }
            })
            .catch(error => console.error(error));

        // On met en place la VM d'attaque
        fetch("{{url_for('api.VM_get_existing_attack_vm_resource')}}")
            .then(response => response.json())
            .then(data => {
                if (data.exists) {
                    // Show the info of the existing VMs
                    console.debug("Found existing attack VMs")
                    displayAttackVMInfos(data)
                } else {
                    // We don't have any VMs, show the "request VM" button
                    document.getElementById("attack-vm-info-data").style.display = 'none'
                    document.getElementById("request-attack-vm-button").style.display = ''
                }
            })
            .catch(error => console.error(error));
    }

    function deleteVms() {
        // Disable the button so the users gets feedback
        $('.delete-vms-button').prop('disabled', true);

        fetch('{{ url_for('api.VM_delete_vms_resource') }}', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then(response => response.json())
            // .then(response => alert(JSON.stringify(response)))
            // refresh the page once the VMs are deleted
            .then(response => location.reload(true))
            .catch(error => {
                console.error('Error while deleting VMs:', error);
                showErrorToast("Erreur lors de la suppression des VMs.");
                // Re-enable button so user can try again
                $('.delete-vms-button').prop('disabled', false);
            });
    }

    {% if user_is_in_room %}
    $(document).ready(function () {
        setupVMInfos();
    });
    {% endif %}
</script>
{% endblock head %}

{# Uncomment to enable highlighting the current question on the sidebar #}
{# {% block body_args %}{{super()}} data-bs-spy="scroll" data-bs-target="#nav-questions"{% endblock body_args %} #}

{% block content %}
<main>
    <!-- partie consigne - progression - questions -->
    <div class="container-fluid px-5">

        {# Block VMs #}
        <div class="container-lg">
            {# Si l'utilisateur n'est pas dans la room, on lui propose de la rejoindre #}
            {% if current_user.is_authenticated %}
            {% if not user_is_in_room %}
            <div class="align-item-top">
                <button type="submit" name="submit_param" value="submit_value" onclick="joinRoom();"
                    class="btn text-success rounded-1 border-2 active fw-semibold m-2" role="button">Rejoindre
                    la room
                </button>
            </div>
            {% else %}
            {# * l'utilisateur est dans la room, on lui propose de lancer les VMs #}
            <div id="vm-info-container" class="row p-2">
                <div id="attack-vm-info-container" class="bg-white rounded-3 m-3 mb-0 p-4 col">
                    <h2>VM attaque:</h2>
                    <div id="attack-vm-info-data">
                        <p class="placeholder-wave"><span class="placeholder col-6"></span></p>
                        <p class="placeholder-wave"><span class="placeholder col-4"></span></p>
                        <p class="placeholder-wave"><span class="placeholder col-5"></span></p>
                        <p class="placeholder-wave"><span class="placeholder col-4"></span></p>
                    </div>
                    {# button lancer VM attaque -> call : requestAttackVMs() #}
                    <button type="submit" name="submit_param" value="submit_value" onclick="requestAttackVMs();"
                        class="btn text-success rounded-1 border-2 active fw-semibold m-2" role="button"
                        style="display: none;" id="request-attack-vm-button">Lancers la VM d'attaque
                    </button>
                </div>

                {% if room.victim_vm_ids %}
                <div id="victim-vm-info-container" class="bg-white rounded-3 m-3 mb-0 p-4 col">
                    <h2>VMs victimes:</h2>
                    <div id="victim-vm-info-data">
                        <p class="placeholder-wave"><span class="placeholder col-6"></span></p>
                        <p class="placeholder-wave"><span class="placeholder col-4"></span></p>
                        <p class="placeholder-wave"><span class="placeholder col-5"></span></p>
                        <p class="placeholder-wave"><span class="placeholder col-4"></span></p>
                    </div>
                    <div id="request-victim-vms" class="">
                        {# button lancer VM victime -> call : requestVictimVMs() #}
                        <button type="submit" name="submit_param" value="submit_value" onclick="requestVictimVMs();"
                            class="btn text-success rounded-1 border-2 active fw-semibold m-2 align-self-end"
                            role="button" style="display: none;" id="request-victim-vms-button">Lancers les VMs
                            victimes
                        </button>
                    </div>
                </div>
                {% endif %}
            </div>
            {% endif %}
            {% endif %}
        </div>

        <div class="container-fluid pt-0">
            <div class="d-lg-none">
                {{ progress_bar(nbr_question_solved, nbr_question_total) }}
            </div>

            <div class="row">
                {# Navbar - Seulement afficher sur les grands écrans #}
                <div class="col-4 d-none d-lg-block p-0">
                    <div class="sticky-top pt-3">
                        {{ progress_bar(nbr_question_solved, nbr_question_total) }}
                        <div id="list-example" class="list-group mt-3">
                            <a class="list-group-item list-group-item-action" href="#room-info">Consignes</a>
                            {% for q in room.questions %}
                            <a class="list-group-item list-group-item-action {{'text-success' if q.is_solved_by(current_user) else ''}}"
                                href="#question_block-{{q.id}}" style="overflow: hidden">{{q.prompt | markdown}}</a>
                            {% endfor %}
                        </div>
                    </div>
                </div>

                {# Parti room / questions #}
                <div class="col pe-0">
                    {% block room_info %}
                    <div class="p-2 pt-3 position-relative" id="room-info">
                        <div class="bg-white rounded-3 p-4" id="roomInfoWidget">
                            <div id="roomInfoDisplay">
                                {{ room.instructions | markdown }}
                            </div>

                            {% if current_user.is_authenticated and current_user.is_admin %}
                            <div id="roomInfoEditForm" style="display: none;">
                                {{ edit_room_input("room-name-edit", "Nom", room.name) }}
                                {{ edit_room_input("room-url_name-edit", "Nom d'URL", room.url_name) }}
                                {{ edit_room_input("room-instructions-edit", "Consignes", room.instructions,
                                multiline=true) }}
                                {{ edit_room_input("room-description-edit", "Description", room.description,
                                multiline=true) }}
                                {{ edit_room_input("room-victim_vm_ids-edit", "ID des VMs victimes",
                                room._victim_vm_ids, placeholder="ID des VMs victimes, séparé par des points-virgules")
                                }}
                                <input type="button" class="btn rounded-1 border-2 active text-info fw-semibold mb-2"
                                    role="button" onclick="saveRoom('{{room.url_name}}')"
                                    value="Enregistrer les modifications">
                            </div>
                            {# button edit #}
                            <div>
                                <button type="button" class="btn btn-outline-secondary"
                                    onclick="toggleRoomEditMode(true);" id="editRoomButton">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                        class="bi bi-pen" viewBox="0 0 16 16">
                                        <path
                                            d="m13.498.795.149-.149a1.207 1.207 0 1 1 1.707 1.708l-.149.148a1.5 1.5 0 0 1-.059 2.059L4.854 14.854a.5.5 0 0 1-.233.131l-4 1a.5.5 0 0 1-.606-.606l1-4a.5.5 0 0 1 .131-.232l9.642-9.642a.5.5 0 0 0-.642.056L6.854 4.854a.5.5 0 1 1-.708-.708L9.44.854A1.5 1.5 0 0 1 11.5.796a1.5 1.5 0 0 1 1.998-.001zm-.644.766a.5.5 0 0 0-.707 0L1.95 11.756l-.764 3.057 3.057-.764L14.44 3.854a.5.5 0 0 0 0-.708l-1.585-1.585z">
                                        </path>
                                    </svg>
                                    Modifier la room
                                </button>
                                <button type="button" class="btn btn-outline-danger"
                                    onclick="deleteRoom('{{room.url_name}}');">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                        class="bi bi-trash" viewBox="0 0 16 16">
                                        <path
                                            d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5Zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6Z">
                                        </path>
                                        <path
                                            d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1ZM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118ZM2.5 3h11V2h-11v1Z">
                                        </path>
                                    </svg>
                                    Supprimer la room
                                </button>
                            </div>
                            {% endif %}
                        </div>
                    </div>
                    {% endblock %}

                    <!-- Confettis -->
                    {% if nbr_question_solved == nbr_question_total %}
                    <script>
                        confetti({ particleCount: 500, spread: 95, origin: { y: 1.5 }, startVelocity: 130, });
                    </script>
                    {% endif %}

                    {% block progession %}
                    {# si l'user est CONNECTE et est DANS LA ROOM ---> afficher progression #}
                    {% if current_user.is_authenticated %}
                    {% if user_is_in_room %}
                    {#
                    <script>
                        // légère animation de la progression lorsque l'on scroll vers le bas
                        window.onscroll = function () { scrollFunction() };
                        function scrollFunction() {
                            var progressBar = document.getElementById("progress-bar-scroll")
                            // Si la progress bar est "pinned"
                            if (progressBar.getBoundingClientRect().top <= 50) {
                                document.getElementById("progress-bar-scroll").removeAttribute('class');
                                document.getElementById("progress-bar-scroll").setAttribute("class", "bg-white rounded-3 px-4 py-2 pb-3 justify-content-center border border-2 border-primary progress-bar-vertical-transition mt-2")
                                document.getElementById("progress-bar-scroll").setAttribute("style", "width: 80%;")
                            } else {
                                document.getElementById("progress-bar-scroll").removeAttribute('class');
                                document.getElementById("progress-bar-scroll").setAttribute("class", "bg-white rounded-3 p-4 justify-content-center border border-2 border-primary progress-bar-vertical-transition")
                                document.getElementById("progress-bar-scroll").setAttribute("style", "width: 100%;")
                            }
                        }
                    </script> #}
                    {# <div class="mx-2 sticky-top pb-1 d-flex justify-content-center"> #}
                        <!-- Progression -->
                        {# <div class="bg-white rounded-3 p-4 justify-content-center border border-2 border-primary"
                            id="progress-bar-scroll" style="width: 100%">
                            <div class="row">
                                <div class="col">
                                    <p><strong>Progression:</strong> {{nbr_question_solved}}/{{nbr_question_total}}</p>
                                    <div class="progress">
                                        <div class="progress-bar {{'bg-success progress-bar-striped progress-bar-animated' if nbr_question_solved == nbr_question_total else ''}}"
                                            aria-valuenow="{{nbr_question_solved}}" aria-valuemin="0"
                                            aria-valuemax="{{nbr_question_total}}"
                                            style="width: {{ progress_percentage }}%"></div>
                                    </div>
                                </div>
                                <!-- button SUPPRIMER VM ----- call :  deleteVms() -->
                                <div class="col-md-auto" id="delete-vms-button-container" style="display: none;">
                                    <button type="submit" name="submit_param" value="submit_value"
                                        onclick="deleteVms();"
                                        class="btn text-danger rounded-1 border-2 active fw-semibold m-2 align-self-end"
                                        role="button" id="delete-vms-button">Supprimer les VMs
                                    </button>
                                </div>
                            </div>
                        </div> #}
                        {# <!-- VM --> #}
                        {# <iframe class="responsive-iframe " style="width: 100% height: 100%;"
                            src="http://172.17.50.249:6080/vnc.html?host=172.17.50.249&port=6080&autoconnect=true&resize=scale">
                        </iframe> #}
                        {# <iframe class="responsive-iframe " sandbox='allow-same-origin allow-scripts allow-modals'
                            style="width: 100% height: 100%;" src="{{vnc_url}}">
                        </iframe> #}
                        {# <iframe class="responsive-iframe " style="width: 100% height: 100%;" src="{{vnc_url}}">
                        </iframe> #}
                        {#
                    </div> #}
                    {% endif %}
                    {% endif %}
                    {% endblock %}

                    {% block questions %}
                    {# pour chaque question #}
                    {% for q in room.questions %}
                    {# Le widget à un id de "question_block-{{question.id}}"" #}
                    {# disabled - la question est bloqué si l'user n'est pas co OU s'il a résolu la question #}
                    {{ question_widget(q, disabled=(not current_user.is_authenticated or q.is_solved_by(current_user) or
                    not
                    user_is_in_room),
                    solved=(current_user.is_authenticated and q.is_solved_by(current_user)))}}
                    {% endfor %}
                    {% endblock %}
                    {% if current_user.is_authenticated and current_user.is_admin %}
                    <button type="submit" name="submit_param" value="submit_value" onclick="createQuestion();"
                        class="btn text-success rounded-1 border-2 active fw-semibold m-2 align-self-end" role="button"
                        id="add-question">Ajouter une question
                    </button>
                    {% endif %}
                </div>
            </div>
        </div>
</main>
{% endblock %}